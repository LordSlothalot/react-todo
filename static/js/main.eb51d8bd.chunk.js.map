{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/SideBar.js","components/CreateTaskButton.js","components/MainSection.js","TodoApp.js","index.js"],"names":["TodoItem","todo","toggleComplete","removeTodo","ListItem","style","display","backgroundColor","completed","ListItemIcon","Checkbox","edge","checked","onClick","id","color","ListItemText","Typography","noWrap","variant","task","ListItemSecondaryAction","IconButton","TodoList","todos","filteredTodos","showCompleted","filter","List","map","useStyles","makeStyles","theme","root","padding","margin","SideBar","setTodos","classes","useState","setShowCompleted","Grid","container","alignItems","justify","className","item","FormControlLabel","onChange","control","Switch","size","label","input","marginLeft","spacing","flex","iconButton","divider","height","CreateTaskButton","addTodo","setTodo","Paper","component","onSubmit","e","preventDefault","trim","uuid","v4","InputBase","placeholder","value","target","Divider","orientation","type","ClearAllDialogue","open","handleClose","clearAll","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","MainSection","React","setOpen","direction","width","LOCAL_STORAGE_KEY","App","window","innerWidth","setWidth","useEffect","addEventListener","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","Container","maxWidth","disableGutters","xs","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.eb51d8bd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Checkbox, IconButton, ListItem, Typography, ListItemIcon, ListItemSecondaryAction, ListItemText } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\n\nconst TodoItem = ({ todo, toggleComplete, removeTodo }) => {\n    function handleCheckboxClick() {\n      toggleComplete(todo.id);\n    }\n    function handleRemoveClick() {\n      removeTodo(todo.id);\n    }\n  \n    return (\n      <ListItem style={{ display: \"flex\", backgroundColor: todo.completed ? \"#a5d6a7\" : \"#ffd180\"}}>\n        <ListItemIcon>\n          <Checkbox edge=\"start\" checked={todo.completed} onClick={handleCheckboxClick} color=\"disabled\"/>\n        </ListItemIcon>\n        <ListItemText>\n          <Typography noWrap variant=\"body1\">\n            {todo.task}\n          </Typography>\n        </ListItemText>\n\n        <ListItemSecondaryAction>\n          <IconButton edge=\"end\" onClick={handleRemoveClick}>\n            <CloseIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n    );\n  }\n\nexport default TodoItem;","import { List } from \"@material-ui/core\";\nimport React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport \"./TodoList.css\";\n\nfunction TodoList({ todos, removeTodo, toggleComplete, showCompleted }) {\n  const filteredTodos = showCompleted\n    ? todos\n    : todos.filter(todo => todo.completed === false);\n\n  return (\n    <List>\n      {filteredTodos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            removeTodo={removeTodo}\n            toggleComplete={toggleComplete}\n          />\n      ))}\n    </List>\n  );\n}\n\nexport default TodoList;","import React, { useState } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { Switch, Grid } from \"@material-ui/core\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: '2px 4px',\n    margin: '2px 4px',\n  },\n}));\n\nconst SideBar = ({ \n  todos,\n  setTodos\n}) => {\n  const classes = useStyles();\n  \n  const [showCompleted, setShowCompleted] = useState(true);\n  \n  const toggleComplete = (id) => {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  const removeTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  const toggleShowCompleted = () => {\n    setShowCompleted(!showCompleted);\n  }\n\n  return (\n    <>\n      <Grid container alignItems=\"center\" justify=\"space-between\"  className={classes.root} >\n        <Grid item>\n          <h2>\n            Tasks\n          </h2>\n        </Grid>\n        <Grid item >\n          <FormControlLabel\n            className=\"toggle\"\n            onChange={toggleShowCompleted} \n            control={<Switch size=\"small\" checked={showCompleted} color=\"primary\"/>}\n            label=\"Show Completed\"\n          />\n        </Grid>\n      </Grid>\n      <TodoList\n        todos={todos}\n        removeTodo={removeTodo}\n        toggleComplete={toggleComplete}\n        showCompleted={showCompleted}\n      />\n    </>\n  );\n}\n\nexport default SideBar;\n","import React, { useState } from \"react\";\nimport uuid from \"uuid\";\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n}));\n\nconst CreateTaskButton = ({ addTodo }) => {\n    const [todo, setTodo] = useState({\n      id: \"\",\n      task: \"\",\n      completed: false\n    });\n  \n    const handleTaskInputChange = (e) => {\n      setTodo({ ...todo, task: e.target.value });\n    }\n  \n    const handleSubmit = (e) => {\n      e.preventDefault();\n      if (todo.task.trim()) {\n        addTodo({ ...todo, id: uuid.v4() });\n        setTodo({ ...todo, task: \"\" });\n      }\n    }\n    \n    const classes = useStyles();\n\n    return (\n      <Paper component=\"form\" className={classes.root} onSubmit={handleSubmit}>\n        <InputBase\n          className={classes.input}\n          placeholder=\"Create task\"\n          value={todo.task}\n          onChange={handleTaskInputChange}\n        />\n        <Divider className={classes.divider} orientation=\"vertical\" />\n        <IconButton className={classes.iconButton} type=\"submit\"><AddIcon /></IconButton>\n      </Paper>\n    );\n  }\n  \n  export default CreateTaskButton;","import Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport TodoForm from \"./CreateTaskButton\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from \"@material-ui/core/Grid\";\n\nconst ClearAllDialogue = ({\n  open,\n  handleClose,\n  clearAll\n}) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n    >\n      <DialogTitle>{\"Clear all tasks\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Are you sure you want to clear all tasks?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={clearAll} color=\"primary\" autoFocus>\n          Clear\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\n\nconst MainSection = ({ \n  todos,\n  setTodos\n}) => {\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpenClearAllDialogue = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  \n  const addTodo = (todo) => {\n    setTodos([...todos, todo]);\n  }\n\n  const clearAll = () => {\n    setTodos([]);\n    setOpen(false);\n  }\n\n  return (\n    <>\n      <Grid item container spacing={1} direction=\"column\" justify=\"center\" alignItems=\"center\" height=\"100%\" width=\"100%\">\n        <Grid item  justify=\"center\">\n          <Typography noWrap style={{ padding: 16 }} variant=\"h4\">\n            le todos\n          </Typography>\n        </Grid>\n\n        <Grid item>\n          <TodoForm addTodo={addTodo} />\n        </Grid>\n        \n        <Grid item container direction=\"column\" justify=\"flex-end\" alignItems=\"center\" height=\"100%\">\n          <Grid item>\n            <Button variant=\"outlined\" onClick={handleOpenClearAllDialogue}>Clear All</Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <ClearAllDialogue \n        open={open}\n        handleClose={handleClose}\n        clearAll={clearAll}\n      />\n    </>\n  );\n}\n\nexport default MainSection;\n","import React, { useEffect, useState } from \"react\";\nimport './TodoApp.css';\nimport SideBar from \"./components/SideBar\";\nimport MainSection from \"./components/MainSection\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { Grid, Container } from \"@material-ui/core\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [width, setWidth] = React.useState(window.innerWidth);\n  const breakpoint = 620;\n\n  React.useEffect(() => { window.addEventListener(\"resize\", () => setWidth(window.innerWidth));}, []);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  if (width < breakpoint) {\n    return(\n      <Container maxWidth={false} disableGutters={true}>\n        <MainSection todos={todos} setTodos={setTodos}/>\n        <br/>\n        <Divider/>\n        <SideBar todos={todos} setTodos={setTodos}/>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth={false} disableGutters={true}>\n      <Grid container direction=\"row\">\n        <Grid item xs={4}>\n          <SideBar todos={todos} setTodos={setTodos}/>\n        </Grid>\n        <Grid item xs={8}>\n          <MainSection todos={todos} setTodos={setTodos}/>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoApp from './TodoApp';\nimport './index.css';\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <TodoApp />,\n  rootElement\n);\n"],"sourceRoot":""}